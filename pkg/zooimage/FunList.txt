= ZooImage internal functions and objects

== capabilities.R

ZOOIMAGEENV = environment
checkCapable(cap)
capabilities = list
checkZipAvailable()
checkUnzipAvailable()
checkZipnoteAvailable()
checkIdentifyAvailable()
checkConvertAvailable()
checkPpmtopgmAvailable()
checkDcRawAvailable()
checkAvailable_pnm2biff()
checkAvailable_divide()
checkAvailable_statistics()
checkAvailable_biff2tiff()
checkAvailable_java()
checkCapabilityAvailable(cap, cmd, msg)
getZooImageCapability(cap = "zip")
zooImageCapabilities(...)


== catcher.R

catch.env = environment
catch(call)
recallWithCatcher(call, debug = FALSE)
getCatcher()
setCatcher(catcher)
dummyCatcher(call)
resetCatcher()

 
== errorHandling.R

stop(..., call. = TRUE, domain = NULL)
warning(..., call. = TRUE, immediate. = FALSE, domain = NULL)
zooImageError(msg = "error", env = parent.frame(),
    errorClass = NULL, context = NULL, verbose = getOption("verbose"))
zooImageWarning(msg = "warning", env = parent.frame())
zooImageErrorDrivers = list
zooImageWarningDrivers = list
zooImageErrorContext(fun, context)
zooImageWarningContext(fun, context)
getZooImageConditionFunction(calls, drivers, default, context.fun)
getZooImageErrorFunction(calls)
getZooImagheWarningFunction(calls)
[[.zooImageError(x, ...)
[[.zooImageWarning(x, ...)
extractMessage(err)


== misc.R

getSample(x, unique = FALSE, must.have, msg)
backspaces(n = getOption("width"))
callStack()
hasExtension(file, extension = "zip", pattern = extensionPattern(extension))
list.files.ext(dir, extension = "zip", pattern = extensionPattern(extension), ...)
list.zim(zidir, ...)
list.dat1.zim(zidir, ...)
list.zip(zidir, ...)
list.zid(zidir, ...)
extensionPattern(extension = "tif", add.dot = !grepl("[.]", extension))
checkFileExists(file, extension, message = "file not found: %s", force.file = FALSE)
checkAllFileExist(files, extension)
checkDirExists(dir, message = 'Path "%s" does not exist or is not a directory')
checkEmptyDir(dir, message = "not empty")
force.dir.create(path, ...)
checkFirstLine(file, expected = "ZI1", message = 'file "%s" is not a valid ZooImage version 1 file', stop = FALSE)
list.dir(dir, ...)
mustbe(x, class, msg)
mustallbe(..., .list = list(...), class, msg)
mustmatch(x, y, msg)
mustallmatch(..., .list = list(...), msg = "all must match")
mustcontain(container, element, msg)
mustbeString(x, length)
template(file = "default.zim", dir = getOption("ZITemplates"))
finish.loopfunction(ok = TRUE, ok.console.msg = "-- Done! --\n", ok.log.msg = "\n-- OK, no error found. --", nok.console.msg = " -- Done! [ERROR(S) FOUND] --\n", nok.log.msg  = "-- Error(s)! --", bell = TRUE, show.log = FALSE, show.console = TRUE)
zip(zipfile , directory, delete.source = FALSE, comment.file = NULL, delete.zipfile.first = TRUE)
zip_addcomments(zip, comment.file, on.failure = stop(sprintf(on.failure.msg , comment.file, zip)), on.failure.msg = "problem adding comment from '%s' to file '%s' ", on.success)
unzip(zipfile, path, delete.source = FALSE)
zipnote(zipfile, outfile = NULL)

= programs.R

program(prog, args, ..., dir)
xite(prog, args, ...)
xite_pnm2biff(input, output)
xite_statistics(file)
xite_divide(meangray, image, bf, cor)
xite_biff2tiff(cor, tif)
imagemagick(prog, args, ...)
imagemagick_identify(file)
imagemagick_convert(file, size1, size2)
misc(prog, args, ...)
misc_dcraw(file, arguments, output)
netpbm(prog, args, ...)
netpbm_tifftopnm(input, output)
netpbm_pgmhist(file, delete = TRUE)
netpbm_ppmtopgm(ppm, pgm)
editor(file, editor = getOption("ZIEditor"))
imageViewer(dir = getwd())
