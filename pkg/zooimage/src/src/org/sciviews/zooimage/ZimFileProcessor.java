package org.sciviews.zooimage;

import java.util.TreeSet;

import org.sciviews.zooimage.config.CalibrationData;
import org.sciviews.zooimage.config.ProcessOptions;
import org.sciviews.zooimage.exceptions.ZooImageException;
import org.sciviews.zooimage.files.ImageFile;
import org.sciviews.zooimage.files.ZimFile;
import org.sciviews.zooimage.log.Log;
import org.sciviews.zooimage.tools.IJUtilities;

/**
 * Class that processes a single Zim file
 * @author Romain Francois <francoisromain@free.fr>
 *
 */
public class ZimFileProcessor implements Runnable {

	/**
	 * Zim file this is processing
	 */
	protected ZimFile file ;
	
	/**
	 * Calibration options
	 */
	@Deprecated
	protected CalibrationData calibration ;
	
	/**
	 * Options about the process
	 * allfiles, analyzepart, makevigs, sharpenvigs, showoutline, ziptiff
	 */
	@Deprecated
	public ProcessOptions options ;
	 
	/**
	 * Count of images that have been processed by this processor
	 */
	private int count ;
	
	/**
	 * The plugin calling this zim file processor
	 */
	protected ZooImagePlugin plugin ;
	
		
	/**
	 * Constructor
	 * @param file
	 */
	public ZimFileProcessor( ZimFile file, ZooImagePlugin plugin ){
		this.file = file ;
		this.plugin = plugin ;
		this.calibration = plugin.getCalibration() ;
		this.options = plugin.getOptions() ; 
		calibration.read( file ) ;
		count = 0 ;
	}
	
	/**
	 * Process the Zim file 
	 */
	public void run(){
		
		// Log that we started processing the zim file
		Log.log("Process file :" + file.getName()  );
		
		// close all images
		IJUtilities.closeAllImages() ; 
		
		// process all images associated with this zim file
		TreeSet<ImageFile> images = file.getImageFiles() ;
		Log.log("Starting to process images ...");
		
		// Process each image
		for( ImageFile im: images ){
			Log.debug("Creating Image File Processor for " + im );
			ImageFileProcessor ifp = new ImageFileProcessor( im, this ) ;
			Log.debug("   ... ok "  );
			
			try{
				Log.debug("Running Image File Processor for " + im );
				ifp.run() ;
				Log.debug("   ... ok "  );
				im.moveToRawDirectory() ;
				addCount( ) ;
				file.makeDATFile( plugin.getParams() , ifp.getResults(), count ) ;
			} catch( ZooImageException e){
				// this is where we catch whatever exception that gets
				// generated by ZooImage, we log it and move on to the next image
				e.log() ;
			}
			
		}
		
		Log.log( "Finished processing images " ) ;
		Log.log( count + "images successfully processed" ) ;
		
		
	}

	public int getCount() {
		return count;
	}
	
	/**
	 * Returns the Calibration information
	 * @return the calibration information
	 */
	public CalibrationData getCalibration() {
		return calibration ;
	}

	/**
	 * Increments the total number of images that have been processed 
	 * by the processor
	 */
	public void addCount(){
		count++ ;
	}
	
	/**
	 * Returns the process options associated with this processor
	 * @return the options
	 */
	public ProcessOptions getOptions() {
		return options ;
	}
	
	/**
	 * Returns the zim file associated with this processor
	 * @return the zim file
	 */
	public ZimFile getZim() {
		return file ;
	}
	
	/**
	 * The plugin that called this processor
	 * @return the calling plugin
	 */
	public ZooImagePlugin getPlugin(){
		return plugin ;
	}
	
	/**
	 * Indicates that the image being processed is the last one
	 * @return
	 */
	public boolean isProcessingLastImage(){
		return count == file.getImageFiles().size() ;
	}
	
}
